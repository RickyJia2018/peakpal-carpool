syntax = "proto3";

package pb;

import "google/api/annotations.proto";

import "rpc_trip.proto";
import "rpc_station.proto";
import "rpc_passenger.proto";
import "rpc_authorize_user.proto";
import "rpc_resort.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/rickyjia2018/peakpal-carpool/pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "Peak Pal API - Carpool server";
        version: "1.0";
        contact: {
            name: "Googuar Inc.";
            url: "https://googuar.com/";
            email: "support@googuar.com";
        };
        description:"All time are using Unix Timestamp - https://www.epochconverter.com/";
    };
    schemes: [HTTP, HTTPS];  // Use an array of identifiers for HTTP and HTTPS
    // base_path: "/v1";
    security_definitions: {
        security: {
            key:"bearer"
            value:{
                type: TYPE_API_KEY,
                in: IN_HEADER,
                name: 'Authorization',
                description: "Authentication token, prefixed by Bearer: Bearer <token>",
            }
        }
    };
    security: {
        security_requirement: {
          key: "bearer"
        }
      };
};

service Carpool{
    rpc CreateTrip(CreateTripRequest) returns (CreateTripResponse){
        option (google.api.http) = {
            post: "/create_trip"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to create a trip record";
            summary: "Create new Trip";
        };
    }
    rpc GetTrip(GetTripRequest) returns (GetTripResponse){
        option (google.api.http) = {
            get: "/get_trip"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to get a trip record by ID";
            summary: "Get Trip by ID";
        };
    }

    rpc ListFutureTrips(ListFutureTripsRequest)returns(ListTripsResponse){
        option (google.api.http) = {
            get: "/list_future_trips"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to get all not expired trips by resorts (Departure time is after Now()) ";
            summary: "List future Trips";
        };
    }
    rpc ListDriverTrips(ListDriverTripsRequest)returns(ListTripsResponse){
        option (google.api.http) = {
            get: "/list_driver_trips"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to get all trips belongs to current driver";
            summary: "List Driver's Trips";
        };
    }
    rpc UpdateTrip (UpdateTripRequest) returns (GetTripResponse){
        option (google.api.http) = {
            patch: "/update_trip"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to update trip, must provide driver id";
            summary: "Update Driver's Trips";
        };
    }
    rpc DeleteTrip (DeleteTripRequest)returns(DeleteTripResponse){
        option (google.api.http) = {
            delete: "/delete_trip"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to Delete a trip";
            summary: "Delete Driver's Trips";
        };
    }
    /*****************  Stations****************/
    rpc CreateStation(CreateStationRequest)returns(CreateStationResponse){
        option (google.api.http) = {
            post: "/create_station"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to create a station related to a trip";
            summary: "Create new Station";
        };
    }
    rpc ListStations(ListStationsRequest)returns(ListStationsResponse){
        option (google.api.http) = {
            get: "/list_stations"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to get all stations in a trip ";
            summary: "List Trips' stations";
        };
    }
    rpc DeleteStations(DeleteStationRequest)returns(DeleteStationResponse){
        option (google.api.http) = {
            delete: "/delete_station"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to Delete a station";
            summary: "Delete station";
        };
    }
    /************************ Passengers ********************************/
    rpc CreatePassenger(CreatePassengerRequest)returns(CreatePassengerResponse){
        option (google.api.http) = {
            post: "/create_passenger"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to create a Passenger related to a trip";
            summary: "Create new Passenger";
        };
    }
    rpc ListPassengers(ListPassengersRequest)returns(ListPassengersResponse){
        option (google.api.http) = {
            get: "/list_passengers"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to get all Passengers in a trip ";
            summary: "List Trips' Passenger";
        };
    }
    rpc DeletePassengers(DeletePassengerRequest)returns(DeletePassengerResponse){
        option (google.api.http) = {
            delete: "/delete_passenger"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to Delete a Passenger";
            summary: "Delete Passenger";
        };
    }
}
service PeakPal {
    rpc AuthorizeUser (AuthorizeUserRequest) returns (AuthorizeUserResponse);
    rpc GetResort (GetResortRequest) returns(GetResortResponse);
}
