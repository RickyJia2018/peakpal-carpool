// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: service_peakpal.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PeekPal_AuthorizeUser_FullMethodName = "/pb.PeekPal/AuthorizeUser"
	PeekPal_GetCountry_FullMethodName    = "/pb.PeekPal/GetCountry"
	PeekPal_ListCountries_FullMethodName = "/pb.PeekPal/ListCountries"
	PeekPal_GetResort_FullMethodName     = "/pb.PeekPal/GetResort"
	PeekPal_ListResorts_FullMethodName   = "/pb.PeekPal/ListResorts"
)

// PeekPalClient is the client API for PeekPal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeekPalClient interface {
	AuthorizeUser(ctx context.Context, in *AuthorizeUserRequest, opts ...grpc.CallOption) (*AuthorizeUserResponse, error)
	GetCountry(ctx context.Context, in *GetCountryRequest, opts ...grpc.CallOption) (*GetCountryResponse, error)
	ListCountries(ctx context.Context, in *ListCountriesRequest, opts ...grpc.CallOption) (*ListCountriesResponse, error)
	GetResort(ctx context.Context, in *GetResortRequest, opts ...grpc.CallOption) (*GetResortResponse, error)
	ListResorts(ctx context.Context, in *ListResortsRequest, opts ...grpc.CallOption) (*ListResortsResponse, error)
}

type peekPalClient struct {
	cc grpc.ClientConnInterface
}

func NewPeekPalClient(cc grpc.ClientConnInterface) PeekPalClient {
	return &peekPalClient{cc}
}

func (c *peekPalClient) AuthorizeUser(ctx context.Context, in *AuthorizeUserRequest, opts ...grpc.CallOption) (*AuthorizeUserResponse, error) {
	out := new(AuthorizeUserResponse)
	err := c.cc.Invoke(ctx, PeekPal_AuthorizeUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peekPalClient) GetCountry(ctx context.Context, in *GetCountryRequest, opts ...grpc.CallOption) (*GetCountryResponse, error) {
	out := new(GetCountryResponse)
	err := c.cc.Invoke(ctx, PeekPal_GetCountry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peekPalClient) ListCountries(ctx context.Context, in *ListCountriesRequest, opts ...grpc.CallOption) (*ListCountriesResponse, error) {
	out := new(ListCountriesResponse)
	err := c.cc.Invoke(ctx, PeekPal_ListCountries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peekPalClient) GetResort(ctx context.Context, in *GetResortRequest, opts ...grpc.CallOption) (*GetResortResponse, error) {
	out := new(GetResortResponse)
	err := c.cc.Invoke(ctx, PeekPal_GetResort_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peekPalClient) ListResorts(ctx context.Context, in *ListResortsRequest, opts ...grpc.CallOption) (*ListResortsResponse, error) {
	out := new(ListResortsResponse)
	err := c.cc.Invoke(ctx, PeekPal_ListResorts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeekPalServer is the server API for PeekPal service.
// All implementations must embed UnimplementedPeekPalServer
// for forward compatibility
type PeekPalServer interface {
	AuthorizeUser(context.Context, *AuthorizeUserRequest) (*AuthorizeUserResponse, error)
	GetCountry(context.Context, *GetCountryRequest) (*GetCountryResponse, error)
	ListCountries(context.Context, *ListCountriesRequest) (*ListCountriesResponse, error)
	GetResort(context.Context, *GetResortRequest) (*GetResortResponse, error)
	ListResorts(context.Context, *ListResortsRequest) (*ListResortsResponse, error)
	mustEmbedUnimplementedPeekPalServer()
}

// UnimplementedPeekPalServer must be embedded to have forward compatible implementations.
type UnimplementedPeekPalServer struct {
}

func (UnimplementedPeekPalServer) AuthorizeUser(context.Context, *AuthorizeUserRequest) (*AuthorizeUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeUser not implemented")
}
func (UnimplementedPeekPalServer) GetCountry(context.Context, *GetCountryRequest) (*GetCountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountry not implemented")
}
func (UnimplementedPeekPalServer) ListCountries(context.Context, *ListCountriesRequest) (*ListCountriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCountries not implemented")
}
func (UnimplementedPeekPalServer) GetResort(context.Context, *GetResortRequest) (*GetResortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResort not implemented")
}
func (UnimplementedPeekPalServer) ListResorts(context.Context, *ListResortsRequest) (*ListResortsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResorts not implemented")
}
func (UnimplementedPeekPalServer) mustEmbedUnimplementedPeekPalServer() {}

// UnsafePeekPalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeekPalServer will
// result in compilation errors.
type UnsafePeekPalServer interface {
	mustEmbedUnimplementedPeekPalServer()
}

func RegisterPeekPalServer(s grpc.ServiceRegistrar, srv PeekPalServer) {
	s.RegisterService(&PeekPal_ServiceDesc, srv)
}

func _PeekPal_AuthorizeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeekPalServer).AuthorizeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeekPal_AuthorizeUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeekPalServer).AuthorizeUser(ctx, req.(*AuthorizeUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeekPal_GetCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeekPalServer).GetCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeekPal_GetCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeekPalServer).GetCountry(ctx, req.(*GetCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeekPal_ListCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCountriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeekPalServer).ListCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeekPal_ListCountries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeekPalServer).ListCountries(ctx, req.(*ListCountriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeekPal_GetResort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeekPalServer).GetResort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeekPal_GetResort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeekPalServer).GetResort(ctx, req.(*GetResortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeekPal_ListResorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeekPalServer).ListResorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeekPal_ListResorts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeekPalServer).ListResorts(ctx, req.(*ListResortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PeekPal_ServiceDesc is the grpc.ServiceDesc for PeekPal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeekPal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PeekPal",
	HandlerType: (*PeekPalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthorizeUser",
			Handler:    _PeekPal_AuthorizeUser_Handler,
		},
		{
			MethodName: "GetCountry",
			Handler:    _PeekPal_GetCountry_Handler,
		},
		{
			MethodName: "ListCountries",
			Handler:    _PeekPal_ListCountries_Handler,
		},
		{
			MethodName: "GetResort",
			Handler:    _PeekPal_GetResort_Handler,
		},
		{
			MethodName: "ListResorts",
			Handler:    _PeekPal_ListResorts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_peakpal.proto",
}
