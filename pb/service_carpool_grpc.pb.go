// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: service_carpool.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CarpoolServer_CreateCarpool_FullMethodName = "/pb.CarpoolServer/CreateCarpool"
)

// CarpoolServerClient is the client API for CarpoolServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarpoolServerClient interface {
	CreateCarpool(ctx context.Context, in *CreateCarpoolRequest, opts ...grpc.CallOption) (*CreateCarpoolResponse, error)
}

type carpoolServerClient struct {
	cc grpc.ClientConnInterface
}

func NewCarpoolServerClient(cc grpc.ClientConnInterface) CarpoolServerClient {
	return &carpoolServerClient{cc}
}

func (c *carpoolServerClient) CreateCarpool(ctx context.Context, in *CreateCarpoolRequest, opts ...grpc.CallOption) (*CreateCarpoolResponse, error) {
	out := new(CreateCarpoolResponse)
	err := c.cc.Invoke(ctx, CarpoolServer_CreateCarpool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarpoolServerServer is the server API for CarpoolServer service.
// All implementations must embed UnimplementedCarpoolServerServer
// for forward compatibility
type CarpoolServerServer interface {
	CreateCarpool(context.Context, *CreateCarpoolRequest) (*CreateCarpoolResponse, error)
	mustEmbedUnimplementedCarpoolServerServer()
}

// UnimplementedCarpoolServerServer must be embedded to have forward compatible implementations.
type UnimplementedCarpoolServerServer struct {
}

func (UnimplementedCarpoolServerServer) CreateCarpool(context.Context, *CreateCarpoolRequest) (*CreateCarpoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCarpool not implemented")
}
func (UnimplementedCarpoolServerServer) mustEmbedUnimplementedCarpoolServerServer() {}

// UnsafeCarpoolServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarpoolServerServer will
// result in compilation errors.
type UnsafeCarpoolServerServer interface {
	mustEmbedUnimplementedCarpoolServerServer()
}

func RegisterCarpoolServerServer(s grpc.ServiceRegistrar, srv CarpoolServerServer) {
	s.RegisterService(&CarpoolServer_ServiceDesc, srv)
}

func _CarpoolServer_CreateCarpool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCarpoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarpoolServerServer).CreateCarpool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarpoolServer_CreateCarpool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarpoolServerServer).CreateCarpool(ctx, req.(*CreateCarpoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CarpoolServer_ServiceDesc is the grpc.ServiceDesc for CarpoolServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarpoolServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CarpoolServer",
	HandlerType: (*CarpoolServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCarpool",
			Handler:    _CarpoolServer_CreateCarpool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_carpool.proto",
}
