// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: service_carpool.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Carpool_CreateTrip_FullMethodName = "/pb.Carpool/CreateTrip"
)

// CarpoolClient is the client API for Carpool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarpoolClient interface {
	CreateTrip(ctx context.Context, in *CreateTripRequest, opts ...grpc.CallOption) (*CreateTripResponse, error)
}

type carpoolClient struct {
	cc grpc.ClientConnInterface
}

func NewCarpoolClient(cc grpc.ClientConnInterface) CarpoolClient {
	return &carpoolClient{cc}
}

func (c *carpoolClient) CreateTrip(ctx context.Context, in *CreateTripRequest, opts ...grpc.CallOption) (*CreateTripResponse, error) {
	out := new(CreateTripResponse)
	err := c.cc.Invoke(ctx, Carpool_CreateTrip_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarpoolServer is the server API for Carpool service.
// All implementations must embed UnimplementedCarpoolServer
// for forward compatibility
type CarpoolServer interface {
	CreateTrip(context.Context, *CreateTripRequest) (*CreateTripResponse, error)
	mustEmbedUnimplementedCarpoolServer()
}

// UnimplementedCarpoolServer must be embedded to have forward compatible implementations.
type UnimplementedCarpoolServer struct {
}

func (UnimplementedCarpoolServer) CreateTrip(context.Context, *CreateTripRequest) (*CreateTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrip not implemented")
}
func (UnimplementedCarpoolServer) mustEmbedUnimplementedCarpoolServer() {}

// UnsafeCarpoolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarpoolServer will
// result in compilation errors.
type UnsafeCarpoolServer interface {
	mustEmbedUnimplementedCarpoolServer()
}

func RegisterCarpoolServer(s grpc.ServiceRegistrar, srv CarpoolServer) {
	s.RegisterService(&Carpool_ServiceDesc, srv)
}

func _Carpool_CreateTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarpoolServer).CreateTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Carpool_CreateTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarpoolServer).CreateTrip(ctx, req.(*CreateTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Carpool_ServiceDesc is the grpc.ServiceDesc for Carpool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Carpool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Carpool",
	HandlerType: (*CarpoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTrip",
			Handler:    _Carpool_CreateTrip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_carpool.proto",
}
