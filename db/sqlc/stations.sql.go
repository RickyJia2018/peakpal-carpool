// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: stations.sql

package db

import (
	"context"
)

const createStation = `-- name: CreateStation :one
INSERT INTO stations (
    trip_id,
    station_name,
    arrival_minutes
)VALUES(
    $1,$2,$3
)RETURNING id, trip_id, station_name, arrival_minutes, created_at
`

type CreateStationParams struct {
	TripID         int64  `json:"trip_id"`
	StationName    string `json:"station_name"`
	ArrivalMinutes int32  `json:"arrival_minutes"`
}

func (q *Queries) CreateStation(ctx context.Context, arg CreateStationParams) (Station, error) {
	row := q.db.QueryRow(ctx, createStation, arg.TripID, arg.StationName, arg.ArrivalMinutes)
	var i Station
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.StationName,
		&i.ArrivalMinutes,
		&i.CreatedAt,
	)
	return i, err
}

const deleteStation = `-- name: DeleteStation :exec
DELETE FROM stations
WHERE id = $1
`

func (q *Queries) DeleteStation(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteStation, id)
	return err
}

const listStations = `-- name: ListStations :many
SELECT id, trip_id, station_name, arrival_minutes, created_at FROM stations
WHERE trip_id = $1
ORDER BY arrival_minutes
`

func (q *Queries) ListStations(ctx context.Context, tripID int64) ([]Station, error) {
	rows, err := q.db.Query(ctx, listStations, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Station{}
	for rows.Next() {
		var i Station
		if err := rows.Scan(
			&i.ID,
			&i.TripID,
			&i.StationName,
			&i.ArrivalMinutes,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
