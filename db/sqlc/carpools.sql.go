// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: carpools.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCarpool = `-- name: CreateCarpool :one
INSERT INTO carpools (
    contact_info,
    driver_id,
    max_passenger,
    price,
    able_pick_up,
    resort_id,
    departure_at,
    accept_payment_type,
    currency
)VALUES(
    $1,$2,$3,$4,$5,$6,$7,$8,$9
)RETURNING id, contact_info, driver_id, max_passenger, price, able_pick_up, resort_id, departure_at, accept_payment_type, currency, created_at
`

type CreateCarpoolParams struct {
	ContactInfo       string           `json:"contact_info"`
	DriverID          int64            `json:"driver_id"`
	MaxPassenger      int32            `json:"max_passenger"`
	Price             int32            `json:"price"`
	AblePickUp        bool             `json:"able_pick_up"`
	ResortID          int64            `json:"resort_id"`
	DepartureAt       pgtype.Timestamp `json:"departure_at"`
	AcceptPaymentType string           `json:"accept_payment_type"`
	Currency          string           `json:"currency"`
}

func (q *Queries) CreateCarpool(ctx context.Context, arg CreateCarpoolParams) (Carpool, error) {
	row := q.db.QueryRow(ctx, createCarpool,
		arg.ContactInfo,
		arg.DriverID,
		arg.MaxPassenger,
		arg.Price,
		arg.AblePickUp,
		arg.ResortID,
		arg.DepartureAt,
		arg.AcceptPaymentType,
		arg.Currency,
	)
	var i Carpool
	err := row.Scan(
		&i.ID,
		&i.ContactInfo,
		&i.DriverID,
		&i.MaxPassenger,
		&i.Price,
		&i.AblePickUp,
		&i.ResortID,
		&i.DepartureAt,
		&i.AcceptPaymentType,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
