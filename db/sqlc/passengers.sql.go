// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: passengers.sql

package db

import (
	"context"
)

const createPassenger = `-- name: CreatePassenger :one
INSERT INTO passengers (
    passenger_id,
    trip_id
)VALUES(
    $1,$2
)RETURNING id, passenger_id, trip_id, created_at
`

type CreatePassengerParams struct {
	PassengerID int64 `json:"passenger_id"`
	TripID      int64 `json:"trip_id"`
}

func (q *Queries) CreatePassenger(ctx context.Context, arg CreatePassengerParams) (Passenger, error) {
	row := q.db.QueryRow(ctx, createPassenger, arg.PassengerID, arg.TripID)
	var i Passenger
	err := row.Scan(
		&i.ID,
		&i.PassengerID,
		&i.TripID,
		&i.CreatedAt,
	)
	return i, err
}

const deletePassenger = `-- name: DeletePassenger :exec
DELETE FROM passengers
WHERE id = $1
`

func (q *Queries) DeletePassenger(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePassenger, id)
	return err
}

const listPassengers = `-- name: ListPassengers :many
SELECT id, passenger_id, trip_id, created_at FROM passengers
WHERE trip_id = $1
ORDER BY created_at
`

func (q *Queries) ListPassengers(ctx context.Context, tripID int64) ([]Passenger, error) {
	rows, err := q.db.Query(ctx, listPassengers, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Passenger{}
	for rows.Next() {
		var i Passenger
		if err := rows.Scan(
			&i.ID,
			&i.PassengerID,
			&i.TripID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
